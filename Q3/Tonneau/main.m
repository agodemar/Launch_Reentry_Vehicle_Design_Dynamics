clc; clear; close all;

% Problem solved: 
% Given time histories of angular velocity components
% in body axes, integrate the quaternion components
% evolution equations and determine the related Euler 
% angles time histories.
% Then, for assigned time histories of CG velocity
% components in body axes reconstruct the flight path.


t_fin = 105.0; % Simulation final time

% Initial conditions
phi0 = 0; psi0 = 0; theta0 = 0; % Euler angles
Z0 = 0;

%% Anonymous functions

% Tonneau, some reference values used to build
% three appropriate time histories of p, q, r
p_max = convangvel(4.0,'deg/s','rad/s'); % rad/s
q_max = convangvel(2.0,'deg/s','rad/s'); % rad/s 
R1 = 0; % rad/s

p = @(t) ...
    interp1( ... % <====== NOTE this
        [0 t_fin/30 t_fin/10 t_fin/5 0.7*t_fin 0.9*t_fin t_fin], ...
        [0 p_max/40 p_max*3/4 p_max p_max 0 0], ...
        t, 'pchip' ...
    );
q = @(t) ...
    interp1( ...
        [0 t_fin/30 t_fin/10 t_fin/5 0.8*t_fin 0.9*t_fin t_fin], ...
        [0 q_max/40 q_max*3/4 q_max q_max 0 0], ...
        t, 'pchip' ...
    );
r = @(t) ...
    interp1( ...
        [0 t_fin/30 t_fin/10 t_fin/5 0.8*t_fin 0.9*t_fin t_fin], ...
        [0 R1/40 R1*3/4 R1 R1 0 0], ...
        t, 'pchip' ...
    );

% Looping
% p = @(t) 0.; q = @(t) 1.; r = @(t) 0.;

% Tonneau, some reference values used to build
% three appropriate time histories of u, v, w
u0 = convvel(380.0,'km/h','m/s'); % m/s
v0 = convvel(  0.0,'km/h','m/s'); % m/s 
w0 = convvel(  0.0,'km/h','m/s'); % m/s 

u = @(t) ...
    interp1( ...
        [0, t_fin/30, t_fin/10, t_fin/5, 0.8*t_fin, t_fin], ...
        [u0,  0.8*u0,   0.7*u0,      u0,    1.1*u0,    u0], ...
        t, 'pchip' ...
    );
v = @(t) ...
    0;
w = @(t) ...
    0;

%% Anonymous functions
% RHS of quaternion components evolution equations
dQuatdt = @(t, Q) ...
    0.5*[0,    -p(t), -q(t), -r(t); ...
         p(t),  0,     r(t), -q(t); ...
         q(t), -r(t),  0,     p(t); ...
         r(t),  q(t), -p(t),  0   ...
         ] * [Q(1); Q(2); Q(3); Q(4)];

% T_EB, transform. matrix in Navigation equations
% navigEB = @(Q) ...
%     [Q(1)^2+Q(2)^2-Q(3)^2-Q(4)^2, ...
%         2*(Q(2)*Q(3)-Q(1)*Q(4)), ...
%             2*(Q(2)*Q(4)+Q(1)*Q(3)); ...
%      2*(Q(2)*Q(3)+Q(1)*Q(4)), ...
%         Q(1)^2-Q(2)^2+Q(3)^2-Q(4)^2, ...
%             2*(Q(3)*Q(4)-Q(1)*Q(2)); ...
%      2*(Q(2)*Q(4)-Q(1)*Q(3)), ...
%         2*(Q(3)*Q(4)+Q(1)*Q(2)), ...
%             Q(1)^2-Q(2)^2-Q(3)^2+Q(4)^2];
 
% T_EB, in terms of E = [psi theta phi]
% navigEulerBE = @(E) ...
%     [cos(E(2))*cos(E(1)),
%         cos(E(2))*sin(E(1)),
%             -sin(E(2)); ...
%      sin(E(3))*sin(E(2))*cos(E(1))-cos(E(3))*sin(E(1)), ...
%         sin(E(3))*sin(E(2))*sin(E(1))+cos(E(3))*cos(E(1)), ...
%             sin(E(3))*cos(E(2)); ...
%      cos(E(3))*sin(E(2))*cos(E(1))+sin(E(3))*sin(E(1)), ...
%         cos(E(3))*sin(E(2))*sin(E(1))-sin(E(3))*cos(E(1)), ...
%             cos(E(3))*cos(E(2))];

% T_BE, transpose of T_EB
navigBE = @(Q) ...
    quat2dcm(Q);

%     [Q(1)^2+Q(2)^2-Q(3)^2-Q(4)^2, ...
%         2*(Q(2)*Q(3)+Q(1)*Q(4)), ...
%             2*(Q(2)*Q(4)-Q(1)*Q(3)); ...
%      2*(Q(2)*Q(3)-Q(1)*Q(4)), ...
%         Q(1)^2-Q(2)^2+Q(3)^2-Q(4)^2, ...
%             2*(Q(3)*Q(4)+Q(1)*Q(2)); ...
%      2*(Q(2)*Q(4)+Q(1)*Q(3)), ...
%         2*(Q(3)*Q(4)-Q(1)*Q(2)), ...
%             Q(1)^2-Q(2)^2-Q(3)^2+Q(4)^2];

%% Solution of quaternion component evolution equations
options = odeset( ...
    'RelTol', 1e-9, ...
    'AbsTol', 1e-9*ones(1,4) ...
    );
Q0 = angle2quat(psi0, theta0, phi0);
[vTime, vQuat] = ode45(dQuatdt, [0 t_fin], Q0, options);
N = length(vQuat);

% velocity components at T1(i)
for i=1:numel(vTime)
    vU(i) = u(vTime(i));
    vV(i) = v(vTime(i));
    vW(i) = w(vTime(i));
end

% Quaternion components time histories
figure(1)
subplot 121,
plot( ...
    vTime,vQuat(:,1),'-', ...
    vTime,vQuat(:,2),'--', ...
    vTime,vQuat(:,3),'-', ...
    vTime,vQuat(:,4),':' ...
    )
legend('Q_0','Q_x','Q_y','Q_z')
xlabel('t (s)'); ylabel('')
title('Quaternion components')
% set(gca,'fontname','cambria','fontsize',15)

% Euler angles time histories
subplot 122
[vpsi, vtheta, vphi] = quat2angle(vQuat);
plot( ...
    vTime,convang(vpsi,'rad','deg'),'-', ...
    vTime,convang(vtheta,'rad','deg'),':', ...
    vTime,convang(vphi,'rad','deg'),'--' ...
    )
legend('\psi','\theta','\phi')
xlabel('t (s)'); ylabel('(deg)')
title('Euler angles')
% set(gca,'fontname','cambria','fontsize',15)

% Angular velocity components in body axes, pq, r
figure(2)
plot( ...
    vTime, convangvel(p(vTime),'rad/s','deg/s'), ...
    vTime, convangvel(q(vTime),'rad/s','deg/s'), ...
    vTime, convangvel(r(vTime),'rad/s','deg/s') ...
    )
% axis([0 20 -.3 .6])
legend('p(t)','q(t)','r(t)')
xlabel('t (s)'); ylabel('(deg/s)')
title('Angular velocity components in body axes')
% set(gca,'fontname','cambria','fontsize',15)

% % Integrazione percorso del velivolo
% Ve = zeros(N, 3);
% for i = 1:N
% %     [psi teta phi] = quat2angle(Q(i,:));
%     Ve(i,:) = navigEB(Q1(i,:)) * [vU(i); vV(i); vW(i)]; 
% end
% PosE = cumtrapz(T1, Ve);

% Time interpolation function for known quaternion history
Quat = @(t) ...
    [interp1(vTime,vQuat(:,1),t), ...
        interp1(vTime,vQuat(:,2),t), ...
            interp1(vTime,vQuat(:,3),t), ...
                interp1(vTime,vQuat(:,4),t)];

% RHS of navigation equations
% dPosEdt = @(t,Pos) ...
%     navigEB(Quat(t))*[u(t);v(t);w(t)];
dPosEdt = @(t,Pos) ...
    transpose(quat2dcm(Quat(t)))*[u(t);v(t);w(t)]; %  + 0.*Pos;
            
%% Solution of navigation equations
options = odeset( ...
    'RelTol', 1e-3, ...
    'AbsTol', 1e-3*ones(3,1) ...
    );
PosE0 = [0;0;0];
[vTime2, vPosE] = ode45(dPosEdt, vTime, PosE0, options);
N = length(vPosE);
           
vXe = vPosE(:,1); vYe = vPosE(:,2); vZe = Z0 + vPosE(:,3);

% CG coordinates time history
figure(3)
plot( ...
    vTime,vXe, '-',...
    vTime,vYe, '-.', ...
    vTime,vZe, '--' ...
    )
% hold on, view(3)
legend('x_{G,E}(t)','y_{G,E}(t)','z_{G,E}(t)')
xlabel('t (s)'); ylabel('(m)');
title('CG coordinates in Earth axes');

%% agodemar: plot body and trajectory
h_fig4 = figure(4); 
title('Flight path with body');
%theView = [70 20];
theView = [1,1,0.5];
plotTrajectoryAndBody(h_fig4,vXe,vYe,vZe,vQuat,0.003,25,theView)

%% Save variables for post processing

data_pqr = [vTime,p(vTime)*57.3,q(vTime)*57.3,r(vTime)*57.3];
filename_pqr = 't_pqr.txt';
fileID_pqr = fopen(filename_pqr,'w');
fprintf(fileID_pqr,'%s\n','time p q r');
fclose(fileID_pqr);
save(filename_pqr,'data_pqr','-ASCII','-APPEND')

data_uvw = [vTime,u(vTime)];
filename_uvw = 't_uvw.txt';
fileID_uvw = fopen(filename_uvw,'w');
fprintf(fileID_uvw,'%s\n','time u');
fclose(fileID_uvw);
save(filename_uvw,'data_uvw','-ASCII','-APPEND')

data_quat = [vTime,vQuat];
filename_quat = 't_quat.txt';
fileID_quat = fopen(filename_quat,'w');
fprintf(fileID_quat,'%s\n','time q0 qx qy qz');
fclose(fileID_quat);
save(filename_quat,'data_quat','-ASCII','-APPEND')

data_euler = [vTime,vpsi*57.3,vtheta*57.3,vphi*57.3];
filename_euler = 't_euler.txt';
fileID_euler = fopen(filename_euler,'w');
fprintf(fileID_euler,'%s\n','time psi theta phi');
fclose(fileID_euler);
save(filename_euler,'data_euler','-ASCII','-APPEND')

data_xyz = [vTime,vXe,vYe,vZe];
filename_xyz = 't_xyz.txt';
fileID_xyz = fopen(filename_xyz,'w');
fprintf(fileID_xyz,'%s\n','time Xe Ye Ze');
fclose(fileID_xyz);
save(filename_xyz,'data_xyz','-ASCII','-APPEND')
